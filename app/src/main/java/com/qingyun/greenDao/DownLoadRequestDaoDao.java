package com.qingyun.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qingyun.download.DownLoadRequestDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Download".
*/
public class DownLoadRequestDaoDao extends AbstractDao<DownLoadRequestDao, Long> {

    public static final String TABLENAME = "Download";

    /**
     * Properties of entity DownLoadRequestDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserAgent = new Property(1, String.class, "userAgent", false, "userAgent");
        public final static Property DownLoadUrl = new Property(2, String.class, "downLoadUrl", false, "DOWN_LOAD_URL");
        public final static Property CacheFilePath = new Property(3, String.class, "cacheFilePath", false, "cachePath");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "fileName");
        public final static Property FileIconUrl = new Property(5, String.class, "fileIconUrl", false, "iconUrl");
        public final static Property DownLoadState = new Property(6, int.class, "downLoadState", false, "DOWN_LOAD_STATE");
        public final static Property FileSize = new Property(7, long.class, "fileSize", false, "fileSize");
        public final static Property FileCurrentSize = new Property(8, long.class, "fileCurrentSize", false, "fileCurrentSize");
        public final static Property CreateTime = new Property(9, long.class, "createTime", false, "CREATE_TIME");
    }


    public DownLoadRequestDaoDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadRequestDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Download\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"userAgent\" TEXT," + // 1: userAgent
                "\"DOWN_LOAD_URL\" TEXT," + // 2: downLoadUrl
                "\"cachePath\" TEXT NOT NULL ," + // 3: cacheFilePath
                "\"fileName\" TEXT," + // 4: fileName
                "\"iconUrl\" TEXT," + // 5: fileIconUrl
                "\"DOWN_LOAD_STATE\" INTEGER NOT NULL ," + // 6: downLoadState
                "\"fileSize\" INTEGER NOT NULL ," + // 7: fileSize
                "\"fileCurrentSize\" INTEGER NOT NULL ," + // 8: fileCurrentSize
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 9: createTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "url ON Download" +
                " (\"DOWN_LOAD_URL\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Download\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadRequestDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userAgent = entity.getUserAgent();
        if (userAgent != null) {
            stmt.bindString(2, userAgent);
        }
 
        String downLoadUrl = entity.getDownLoadUrl();
        if (downLoadUrl != null) {
            stmt.bindString(3, downLoadUrl);
        }
        stmt.bindString(4, entity.getCacheFilePath());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        String fileIconUrl = entity.getFileIconUrl();
        if (fileIconUrl != null) {
            stmt.bindString(6, fileIconUrl);
        }
        stmt.bindLong(7, entity.getDownLoadState());
        stmt.bindLong(8, entity.getFileSize());
        stmt.bindLong(9, entity.getFileCurrentSize());
        stmt.bindLong(10, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadRequestDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userAgent = entity.getUserAgent();
        if (userAgent != null) {
            stmt.bindString(2, userAgent);
        }
 
        String downLoadUrl = entity.getDownLoadUrl();
        if (downLoadUrl != null) {
            stmt.bindString(3, downLoadUrl);
        }
        stmt.bindString(4, entity.getCacheFilePath());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        String fileIconUrl = entity.getFileIconUrl();
        if (fileIconUrl != null) {
            stmt.bindString(6, fileIconUrl);
        }
        stmt.bindLong(7, entity.getDownLoadState());
        stmt.bindLong(8, entity.getFileSize());
        stmt.bindLong(9, entity.getFileCurrentSize());
        stmt.bindLong(10, entity.getCreateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadRequestDao readEntity(Cursor cursor, int offset) {
        DownLoadRequestDao entity = new DownLoadRequestDao();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadRequestDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserAgent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownLoadUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCacheFilePath(cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileIconUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDownLoadState(cursor.getInt(offset + 6));
        entity.setFileSize(cursor.getLong(offset + 7));
        entity.setFileCurrentSize(cursor.getLong(offset + 8));
        entity.setCreateTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadRequestDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadRequestDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadRequestDao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
